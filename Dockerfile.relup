# syntax = docker/dockerfile:experimental

# This Dockerfile was heavily influenced by adoptingerlang.org and is
# lightly annotated, for more insights consult
#       https://adoptingerlang.org/docs/production/docker/

# This Dockerfile makes use of Multi-stage builds
#   https://docs.docker.com/develop/develop-images/multistage-build/
# and Docker BuildX
#   https://docs.docker.com/buildx/working-with-buildx/

# Pull down the desired rebar3 image version, here we want the rebar3 dev channel
# which is an image with all the dependencies pinned to latest master
FROM lrascao/rebar3:3.14.3 as rebar3

# https://docs.docker.com/engine/reference/builder/#from
#   "The FROM instruction initializes a new build stage and sets the
#    Base Image for subsequent instructions."
FROM erlang:21.3.8.7-alpine as relup-builder
# https://docs.docker.com/engine/reference/builder/#label
#   "The LABEL instruction adds metadata to an image."
LABEL stage=builder

# copy the rebar3 over from the rebar3 docker image and
# overwriting the one being used by alpine
COPY --from=rebar3 /opt/.cache/rebar3 /opt/.cache/rebar3
COPY --from=rebar3 /usr/local/bin/rebar3 /usr/local/bin/rebar3

# https://docs.docker.com/engine/reference/builder/#user
USER root

# the following argument will allow to delete the stages that
# become too old (like in jenkins)
ARG BUILD_ID
LABEL build=$BUILD_ID

# re-declare the args for this stage
ARG FROM_VERSION
ARG TO_VERSION

# WORKDIR is located in the image
#   https://docs.docker.com/engine/reference/builder/#workdir
WORKDIR /apps/relup
# ENV sets the environment variable <key> to the value <value>, in this
# case we're setting the rebar3 `_build` to be available later on
#   https://docs.docker.com/engine/reference/builder/#env 
ENV REBAR_BASE_DIR /apps/relup/_build

# Install git for fetching non-hex depenencies.
# Add any other Alpine libraries needed to compile the project here.
# See https://wiki.alpinelinux.org/wiki/Local_APK_cache for details
# on the local cache and need for the symlink
RUN --mount=id=apk,type=cache,sharing=locked,target=/var/cache/apk \
    ln -s /var/cache/apk /etc/apk/cache && \
    apk update && \
    apk add --update openssl openssh-client git bash

# create the dir that will hold our ssh config needed to fetch private repos 
# (eg. stash)
RUN mkdir /root/.ssh

# this local ssh config file contains the all the necessary
# ssh configuration of host/keys
# configuration that allows rebar3 to fetch private deps
# eg.
#   Host external-repo external-repo.com
#     HostName external-repo.com
#     IdentityFile ~/.ssh/external-repo-pem.key
#
#   StrictHostKeyChecking no
#
# also notice that you will need to link/copy the .pem of your external
# dependency repo to the root of this project so the --mount directive
# a few lines below can find it
COPY docker/ssh-config /root/.ssh/config

# copy the entirety of the git tree, we need cause we'll be jumping from
# one version to the other, we'll also be copying any unstaged changes made
# locally
COPY . .

# clear any pre-existing stashes
RUN git stash clear

# checkout the FROM_VERSION
RUN --mount=type=cache,id=deps-cache,sharing=shared,target=/root/.cache/rebar3 \
    # the following line is how you transport secrets into the container, one
    # such example for a secret is the .pem key that allows fetch of private deps
    # from a repo as in the example below
    --mount=type=secret,id=private-key-repo-pem.key,target=/root/.ssh/private-key-repo-pem.key \
    --mount=type=ssh \
    # notice how we stash the unstaged changes, we'll want to restore
    git stash save "$TO_VERSION (unstaged changes)" && \
    git checkout $FROM_VERSION

# compile and generate a FROM_VERSION release
RUN --mount=type=cache,id=deps-cache,sharing=shared,target=/root/.cache/rebar3 \
    # the following line is how you transport secrets into the container, one
    # such example for a secret is the .pem key that allows fetch of private deps
    # from a repo as in the example below
    --mount=type=secret,id=private-key-repo-pem.key,target=/root/.ssh/private-key-repo-pem.key \
    --mount=type=ssh \
    rebar3 as docker compile && \
    rebar3 as docker release

# checkout the TO_VERSION and re-apply any existing unstaged changes that apply to the target version
RUN git checkout $TO_VERSION && \
    git stash pop

# compile and generate a TO_VERSION release
RUN --mount=type=cache,id=deps-cache,sharing=shared,target=/root/.cache/rebar3 \
    # the following line is how you transport secrets into the container, one
    # such example for a secret is the .pem key that allows fetch of private deps
    # from a repo as in the example below
    --mount=type=secret,id=private-key-repo-pem.key,target=/root/.ssh/private-key-repo-pem.key \
    --mount=type=ssh \
    rebar3 as docker compile && \
    rebar3 as docker release

# request the appup plugin to automatically generate an .appup file
RUN rebar3 as docker appup generate

# now ask rebar3 to generate the release upgrade from the application upgrade
RUN rebar3 as docker relup --relname simple_web_server --relvsn $TO_VERSION

# generate the tarball that will contain the release upgrade
RUN rebar3 as docker tar

# take a base erlang alpine image and copy over the release upgrade tarball from the previous image
FROM alpine:3.9 as alpine
LABEL stage=release-upgrade-$FROM_VERSION-$TO_VERSION

# final location of the release upgrade
WORKDIR /srv/upgrade

# copy the release tarball from the release layer to here
COPY --from=relup-builder /apps/relup/_build/docker/rel/*/*.tar.gz .



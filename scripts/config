#!/bin/sh

die() { echo "$@" 1>&2 ; exit 1; }

usage()
{
    echo "config create|download|upload|latest <options>"
    echo "  options:"
	echo "   [--endpoint <target endpoint>]"
	echo "   [--version <version>]"
	echo "   [--from <folder>]"
	echo
	echo "Examples:"
	echo " config latest"
	echo " config latest --version <version>"
	echo " config download --version <version>"
	echo " config upload --version <version> [--from <folder, default is cwd>]"
}

create()
{
    ENDPOINT=$1

    #
    # upload to localstack S3
    #
    S3_PUBLIC_POLICY="
    {
      \"Version\":\"2012-10-17\",
      \"Statement\":[
        {
          \"Sid\":\"AllowPublicRead\",
          \"Effect\":\"Allow\",
          \"Principal\": {
            \"AWS\": \"*\"
          },
          \"Action\": \"s3:GetObject\",
          \"Resource\":[\"arn:aws:s3:::simple-web-server/*\"]
          }
      ]
    }
    "
    echo $S3_PUBLIC_POLICY > public-policy.json

    echo "creating simple-web-server bucket"
    # the bucket might have been already created, don't fail if so
    aws --endpoint-url=$ENDPOINT s3 mb s3://simple-web-server || true
    echo "done"

    echo "setting a policy for the simple-web-server bucket"
    aws --endpoint-url=$ENDPOINT s3api put-bucket-policy --bucket simple-web-server --policy file://public-policy.json || true
    rm public-policy.json
    echo "done"

    echo "setting an acl for the simple-web-server bucket"
    aws --endpoint-url=$ENDPOINT s3api put-bucket-acl --bucket simple-web-server --acl public-read
    echo "done"
}

download()
{
    ENDPOINT=$1
    VERSION=$2

    aws --endpoint-url=$ENDPOINT s3 cp s3://simple-web-server/$VERSION/config.json config.json
}

upload()
{
    ENDPOINT=$1
    VERSION=$2
    FROM=$3

    aws --endpoint-url=$ENDPOINT s3 cp $FROM/config.json s3://simple-web-server/$VERSION/config.json
}

latest()
{
    ENDPOINT=$1
    VERSION=$2

    if [[ $VERSION == 'undefined' ]]; then
        aws --endpoint-url=$ENDPOINT s3 cp s3://simple-web-server/latest.txt .
        LATEST=$(cat latest.txt)
        rm latest.txt
        echo $LATEST
        return
    fi

    echo $VERSION > latest.txt
    aws --endpoint-url=$ENDPOINT s3 cp latest.txt s3://simple-web-server/latest.txt
    rm latest.txt
}

COMMAND=$1; shift

# check for empty args
if [[ $COMMAND != 'latest' && $COMMAND != 'create' && $@ = '' ]]; then
    usage
    exit 1
fi

# Parse arguments
TEMP=$(getopt -n version --options e:,v:,f:,h:: --longoptions endpoint:,version:,from:,help:: -- $@)
# Die if they fat finger arguments, this program will be run as root
[ $? = 0 ] || die "Error parsing arguments. version --help"

# by default, module version attributes will not be bumped
VERSION='undefined'
ENDPOINT='http://${SERVICE_ADDRESS:-localhost}:4566/'
FROM=`pwd`

eval set -- "$TEMP"
while true; do
        case $1 in
            -h|--help)
                usage
                exit 0
            ;;
            -e|--endpoint)
                ENDPOINT=$2; shift; shift; continue
            ;;
            -v|--version)
                VERSION=$2; shift; shift; continue
            ;;
		    -f|--from)
				FROM=$2; shift; shift; continue
		    ;;
            --)
                # no more arguments to parse
                break
            ;;
            *)
                printf "Unknown option %s\n" "$1"
                exit 1
            ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
            ;;
        esac
done
eval set -- "$@"

if [[ $COMMAND = 'upload' && $VERSION = 'undefined' ]]; then
    usage
    exit 1
fi

eval $COMMAND $ENDPOINT $VERSION $FROM
